#!/bin/bash

# Define the input and output directories
INPUT_DIR="input"
OUTPUT_DIR="output"
ICG_EXECUTABLE="./icg.out" # Assuming icg.out is in the current directory

# --- Script Start ---

echo "Starting C file processing..."

# Create output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Check if input directory exists
if [ ! -d "$INPUT_DIR" ]; then
    echo "Error: Input directory '$INPUT_DIR' not found."
    exit 1
fi

# Check if icg.out executable exists and is executable
if [ ! -f "$ICG_EXECUTABLE" ] || [ ! -x "$ICG_EXECUTABLE" ]; then
    echo "Error: icg.out executable '$ICG_EXECUTABLE' not found or not executable."
    echo "Please ensure 'icg.out' is in the current directory and has execute permissions (e.g., chmod +x icg.out)."
    exit 1
fi

# Navigate into the input directory to process files
# This makes it easier to handle file paths generated by icg.out
pushd "$INPUT_DIR" > /dev/null || { echo "Failed to change directory to $INPUT_DIR"; exit 1; }

# Loop through each .c file in the input directory
for c_file in *.c; do
    # Check if any .c files were found
    if [ "$c_file" == "*.c" ]; then
        echo "No .c files found in '$INPUT_DIR'."
        break
    fi

    echo "Processing file: $c_file"

    # Get the base name of the file (e.g., "some" from "some.c")
    base_name="${c_file%.c}"

    # Define the target directory for this .c file's output
    # The output directory path needs to be absolute or relative from the original script location
    TARGET_DIR="../$OUTPUT_DIR/$base_name"

    # Create the specific output folder for this .c file
    mkdir -p "$TARGET_DIR"

    # Run icg.out on the current .c file
    # Capture the list of files before and after running icg.out
    # This helps in identifying newly generated files
    files_before_icg=$(ls -A)
    ."$ICG_EXECUTABLE" "$c_file"

    # Get the list of files after running icg.out
    files_after_icg=$(ls -A)

    # Identify newly generated files (excluding the original .c file)
    # Using comm to find differences between two sorted lists
    # -1: suppress lines unique to file1
    # -2: suppress lines unique to file2
    # -3: suppress lines common to both files
    # So, `comm -13` shows lines unique to file2 (files_after_icg)
    generated_files=$(comm -13 <(echo "$files_before_icg" | sort) <(echo "$files_after_icg" | sort) | grep -v "$c_file")

    # Move only .asm files to the target directory
    for generated_file in $generated_files; do
        if [[ "$generated_file" == *.asm ]]; then
            echo "  Moving $generated_file to $TARGET_DIR/"
            mv "$generated_file" "$TARGET_DIR/"
        fi
    done

    # Delete all other generated files (non-.asm and non-original .c file)
    for generated_file in $generated_files; do
        if [[ "$generated_file" != *.asm ]]; then
            echo "  Deleting $generated_file"
            rm -f "$generated_file"
        fi
    done

    echo "Finished processing $c_file."
    echo "" # Add a newline for better readability between files
done

# Return to the original directory
popd > /dev/null

echo "All .c files processed. Check the '$OUTPUT_DIR' directory."
